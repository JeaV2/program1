import os
import colorama
from colorama import Fore, Style

# Initialize colorama
colorama.init()

# Directories to skip
SKIP_DIRECTORIES = ['css', 'content', 'js', 'images', 'img', 'media', 'assets', 'fonts', 'crud']

def has_auto_generated_comment(file_path):
    """Check if the HTML file has the auto-generated comment"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            return '<!-- Automatically generated by /gen.py -->' in content
    except (FileNotFoundError, PermissionError, UnicodeDecodeError):
        return False

def has_index_file(directory):
    """Check if directory contains any index.* file"""
    try:
        items = os.listdir(directory)
        return any(item.startswith('index.') for item in items if os.path.isfile(os.path.join(directory, item)))
    except PermissionError:
        return False

def should_skip_directory(directory_name):
    """Check if directory should be skipped based on name"""
    return directory_name.lower() in [skip.lower() for skip in SKIP_DIRECTORIES]

def generate_index_html(directory='.'):
    current_dir = os.path.abspath(directory)
    current_dir_name = os.path.basename(current_dir)
    
    # Skip if directory name is in skip list
    if should_skip_directory(current_dir_name):
        print(f"{Fore.YELLOW}Skipping {current_dir} - directory name in skip list{Style.RESET_ALL}")
        return
    
    # Skip if folder contains any index.* file (except if it's our auto-generated index.html)
    if has_index_file(current_dir):
        index_html_path = os.path.join(current_dir, 'index.html')
        if not (os.path.exists(index_html_path) and has_auto_generated_comment(index_html_path)):
            print(f"{Fore.YELLOW}Skipping {current_dir} - contains index file{Style.RESET_ALL}")
            return
    
    # Check if index.html exists and if it should be updated
    index_path = os.path.join(current_dir, 'index.html')
    
    # If index.html exists but doesn't have our comment, skip it
    if os.path.exists(index_path) and not has_auto_generated_comment(index_path):
        print(f"{Fore.YELLOW}Skipping {current_dir} - index.html exists but wasn't auto-generated{Style.RESET_ALL}")
        return
    
    # Get subdirectories (excluding hidden ones and skip directories)
    try:
        items = os.listdir(current_dir)
    except PermissionError:
        print(f"{Fore.RED}Permission denied: {current_dir}{Style.RESET_ALL}")
        return
    
    # Filter out hidden directories, skip directories, and files
    subdirs = sorted([d for d in items 
                     if os.path.isdir(os.path.join(current_dir, d)) 
                     and not d.startswith('.')
                     and not should_skip_directory(d)])
    files = sorted([f for f in items 
                   if os.path.isfile(os.path.join(current_dir, f)) 
                   and f != 'index.html' 
                   and not f.startswith('.')])

    # Create/update index.html
    try:
        with open(index_path, 'w', encoding='utf-8') as f:
            f.write('<!-- Automatically generated by /gen.py -->\n')
            f.write(f'<html>\n<head>\n<title>Index of {current_dir_name}</title>\n</head>\n<body>\n')
            f.write(f'<h1>Index of {current_dir_name}</h1>\n')
            
            if subdirs:
                f.write('<h2>Directories</h2>\n<ul>\n')
                for subdir in subdirs:
                    f.write(f'<li><a href="{subdir}/">{subdir}/</a></li>\n')
                f.write('</ul>\n')
            
            if files:
                f.write('<h2>Files</h2>\n<ul>\n')
                for file in files:
                    f.write(f'<li><a href="{file}">{file}</a></li>\n')
                f.write('</ul>\n')
            
            f.write('<p>Back to <a href="../">parent directory</a></p>\n')
            f.write('</body>\n</html>')
        
        print(f"{Fore.GREEN}Created/updated index.html in {current_dir}{Style.RESET_ALL}")
    except (PermissionError, IOError) as e:
        print(f"{Fore.RED}Error creating index.html in {current_dir}: {e}{Style.RESET_ALL}")

def run_recursively(start_dir='.'):
    current_dir = os.path.abspath(start_dir)
    
    # Skip hidden directories
    if os.path.basename(current_dir).startswith('.'):
        return
    
    # Skip directories in skip list
    if should_skip_directory(os.path.basename(current_dir)):
        print(f"{Fore.YELLOW}Skipping {current_dir} - directory name in skip list{Style.RESET_ALL}")
        return
    
    # Generate index.html for current directory
    generate_index_html(current_dir)
    
    # Get subdirectories and run recursively (excluding hidden ones and skip directories)
    try:
        items = os.listdir(current_dir)
        subdirs = [d for d in items 
                  if os.path.isdir(os.path.join(current_dir, d)) 
                  and not d.startswith('.')
                  and not should_skip_directory(d)]
        
        for subdir in subdirs:
            subdir_path = os.path.join(current_dir, subdir)
            run_recursively(subdir_path)
            
    except PermissionError:
        print(f"{Fore.RED}Permission denied: {current_dir}{Style.RESET_ALL}")
        return

if __name__ == "__main__":
    run_recursively()